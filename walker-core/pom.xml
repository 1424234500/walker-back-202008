<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<parent>
		<groupId>com.walker</groupId>
		<artifactId>walker</artifactId>
		<version>0.0.1</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.walker</groupId>
	<artifactId>walker-core</artifactId>
	<version>0.0.1</version>
	<name>core</name>
	<description>pipe redis cache tools</description>
	<packaging>jar</packaging>




	<build>


		<plugins>
			<!-- 配置jdk编译版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
					<encoding>UTF-8</encoding>
					<verbose>false</verbose>
				</configuration>
			</plugin>


			<!-- 打包配置启动类 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>${dir_name_lib}</classpathPrefix>
							<mainClass>com.walker.core.Launcher</mainClass>  <!-- 指定启动类 -->
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<!--
            将打包后生成的jar复制到指定路径 命令mvn package后，才生成jar的包，如果单纯的用resources方法复制文件，是无法在package时复制一个还未存在的东西到某地的
             -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources-jar</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<!-- <delete dir="src/main/webapp/WEB-INF/lib" />-->
								<copy todir="${dir_release}">
									<fileset dir="${project.build.directory}">
										<include name="*.*ar" />
									</fileset>
								</copy>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 复制依赖jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${dir_release}/${dir_name_lib}</outputDirectory>  	<!-- copy lib目录 -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 打包前资源复制 构建项目部署结构 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources-conf</id>
						<!-- 触发阶段 process-resources 执行resources插件的copy-resources目标 -->
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- 指定resources插件处理资源文件到哪个目录下 -->
							<outputDirectory>${dir_release}/${dir_name_conf}</outputDirectory>
							<!-- 待处理的资源定义 -->
							<resources>
								<resource>
									<!-- 指定resources插件处理哪个目录下的资源文件 -->
									<directory>${dir_name_conf}</directory>
									<!--  <filtering>true</filtering> -->
									<!-- <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-resources-bin</id>
						<!-- 触发阶段 process-resources 执行resources插件的copy-resources目标 -->
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- 指定resources插件处理资源文件到哪个目录下 -->
							<outputDirectory>${dir_release}</outputDirectory>
							<!-- 待处理的资源定义 -->
							<resources>
								<resource>
									<!-- 指定resources插件处理哪个目录下的资源文件 -->
									<directory>${dir_name_bin}</directory>
									<!--  <filtering>true</filtering> -->
									<!-- <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


	<!-- 配置依赖 -->
	<dependencies>



		<!-- https://mvnrepository.com/artifact/net.sf.ehcache/ehcache -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.10.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.38</version>
			<!-- <scope>runtime</scope> -->
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>2.3.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.alibaba/dubbo -->
		<!-- java.lang.reflect.MalformedParameterizedTypeException 异常 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>dubbo</artifactId>
			<version>2.5.8</version>
			<!-- 依赖引用冲突，所以排除掉 -->
			<exclusions>
				<exclusion>
					<artifactId>spring</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.belerweb/pinyin4j -->
		<dependency>
			<groupId>com.belerweb</groupId>
			<artifactId>pinyin4j</artifactId>
			<version>2.5.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.9</version>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.8</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.9</version>
			<scope>compile</scope>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>com.google.guava</groupId>-->
<!--			<artifactId>guava</artifactId>-->
<!--			<version>25.1-android</version>-->
<!--			<scope>compile</scope>-->
<!--		</dependency>-->


	</dependencies>
</project>