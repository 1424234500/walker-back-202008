#正式使用 不独立配置的模块
quartz:
  enabled: true
spring:
  #指定别名数据源
  #spring.datasource.walker.url=jdbc:mysqlxxxx
  #默认主数据源 改到sharding里统一路由
  #  datasource:
  #    url: jdbc:mysql://localhost:8098/walker?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true
  #    username: walker
  #    password: qwer
  ##    driver-class-name: com.mysql.jdbc.Driver
  #    driver-class-name: com.mysql.cj.jdbc.Driver
  #    tomcat:
  #      max-idle: 4
  #      max-wait: 4
  #      max-active: 64
  #      validation-query: select 1 from dual
  #      validation-query-timeout: 1000
  jpa:
    database: mysql
    show-sql: true
    hibernate:
      #自动创建表
      ddl-auto: update

      #  create：
      #  每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
      #  create-drop ：
      #  每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
      #  update：
      #  最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
      #  validate ：
      #  每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。

      #jpa表名大小写问题 全大写
      naming-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      naming:
        #        jpa连接查询 leftjoin 第二张表出现依然小写的问题
        physical-strategy:  org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    #        physical-strategy:  com.walker.config.HibernateTableNameStrategy
    database-platform: org.hibernate.dialect.MySQL5Dialect  #分表合表MERGE引擎依赖myisam
    open-in-view: false #避免一个jpa警告
  #    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect  #不加这句则默认为myisam引擎

  #
  #mybatis:
  #  mapper-locations: classpath:mybatis/mapper/*.xml
  #  type-aliases-package: com.sun.shard.bean

  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    #    host: 39.106.111.11
    host: 127.0.0.1
    # Redis服务器连接密码（默认为空）
    password: qwer
    # Redis服务器连接端口
    port: 6379
    lettuce:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 20
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 3000
        # 连接池中的最小空闲连接
        min-idle: 1
    # 连接超时时间（毫秒）
    timeout: 8000

    default:
      #redis cache 过期时间
      expiration: 61
  session:
    jdbc:
      initialize-schema:
#        schemaUpdate：true



#logging:
#  file: /home/walker/logs/walker-service-provider.log
#  #  pattern:
#  #    console: "%date{HH:mm:ss.SSS} %-5level %-30.30logger{29} : %msg%n"
#  Root:
#    level: debug
#    AppenderRef:
#      - ref: CONSOLE
#      - ref: ROLLING_FILE
#  level:
#    com.demo: DEBUG
#    org.springframework.jdbc.core.JdbcTemplate: DEBUG

#
#logging:
#  config: classpath:log4j2.yml


