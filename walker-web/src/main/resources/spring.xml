<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- 导入配置文件 -->
	
	<!-- 导入启动dubbo 异常影响整个项目启动 -->
<!-- <import resource="dubbo-provider.xml" />  -->	

	<!-- 自动扫描 包 ,将带有注解的类 纳入spring容器管理 -->
	<context:component-scan base-package="com.walker.web.dao,com.walker.web.mode,com.walker.service,com.walker.web.event"></context:component-scan>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- <value>classpath*:jdbc.properties</value> -->
				<value>classpath*:*.properties</value>
			</list>
		</property>
	</bean>


	<!-- 数据源 --> 
	<!--================================================-->
	<!-- 配置数据源,dbcp,c3p0 jdbc配置文件 主要针对于一套配置 适配多种连接池工具 映射 -->
	
	<!-- org.springframework.jdbc.datasource.DriverManagerDataSource -->
	<!-- com.mchange.v2.c3p0.ComboPooledDataSource  -->
	<bean id="dataSourceC3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource"   destroy-method="close">
		<property name="DriverClass" value="${jdbc.mysql.DriverClass}"/>
		<property name="JdbcUrl" value="${jdbc.mysql.JdbcUrl}"/>
		<property name="User" value="${jdbc.mysql.User}"/>
		<property name="Password" value="${jdbc.mysql.Password}"/>
		
		<property name="initialPoolSize" value="${ds.initialSize}"/>
		<property name="minPoolSize" value="${ds.minPoolSize}"/>
		<property name="maxPoolSize" value="${ds.maxPoolSize}"/>
		<property name="maxIdleTime" value="${ds.maxIdleTime}"/>
		<property name="maxStatements" value="${ds.maxStatements}"/>
	</bean>
	
	<!-- org.apache.commons.dbcp.BasicDataSource  -->
	<bean id="dataSourceDbcp" class="org.apache.commons.dbcp.BasicDataSource"   destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.DriverClass}"/>
		<property name="url" value="${jdbc.mysql.JdbcUrl}"/>
		<property name="username" value="${jdbc.mysql.User}"/>
		<property name="password" value="${jdbc.mysql.Password}"/>

		<property name="initialSize" value="${ds.initialSize}"/>
		<property name="minIdle" value="${ds.minIdle}"/>
		<property name="maxActive" value="${ds.maxActive}"/>
		<property name="maxWait" value="${ds.maxWait}"/> 
		<property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>
		<property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="validationQuery" value="select 1 from dual"  />
	</bean>

  
	<!-- mybatis --> 
	<!--================================================-->
	<!-- myBatis 引入配置文件 配置dao实现mapper路径 配置MyBatis数据源 sqlSessionFactory-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"    > 
		<property name="dataSource" ref="dataSourceDbcp" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/> 
		<!-- 配置扫描  dao接口实现的 配置文件mapper.xml -->
		<property name="mapperLocations" value="classpath:com/walker/web/dao/mybatis/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.walker.web.mode"></property>
	</bean>
	<!-- 配置mybatis dao 接口 java文件 路径 , 另外必须让mapper.xml文件中接口路径对应接口类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.walker.web.dao.mybatis" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
 
	<!-- Hibernate --> 
	<!--================================================-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSourceDbcp" />
		<property name="mappingLocations"> <list> <value>classpath*:com/**/*.hbm.xml</value> </list> </property>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean>
 
	<!-- 事务管理  --> 
	<!--================================================-->
	<!-- 对dataSource 数据源进行事务管理  共用数据源 共用事务管理 -->
	<!--  <bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"/> -->
	<!-- Hibernate事务管理器的配置，Mybatis也依托该管理器进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
    
	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
			<!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
			<tx:method name="select*" read-only="true"/>
			<tx:method name="count*" read-only="true"/>
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<!-- 事务 aop 配置 -->
	<aop:config>
		<aop:pointcut id="serviceMethods" expression="execution(* com.walker.service..*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
	</aop:config>

	<!-- 配置使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- 启用对事务注解的支持 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- Cache配置 -->
	<!--
		<cache:annotation-driven cache-manager="cacheManager"/>
		<bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
			  p:configLocation="classpath:ehcache.xml"/>
		<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
			  p:cacheManager-ref="ehCacheManagerFactory"/> 
			  -->
</beans>
